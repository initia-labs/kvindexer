syntax = "proto3";

package indexer.nft.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "indexer/nft/v1/types.proto";

option go_package = "github.com/initia-labs/kvindexer/nft/types";

// Query provides the service definition for the Collections and NFTs
service Query {

  // Collection queries a collection by its address
  rpc Collection(QueryCollectionRequest) returns (QueryCollectionResponse) {
    option (google.api.http) = {
      get : "/indexer/nft/v1/collections/{collection_addr}"
    };
  }

  // Collections queries all the collections of an account
  rpc CollectionsByAccount(QueryCollectionsByAccountRequest)
      returns (QueryCollectionsResponse) {
    option (google.api.http) = {
      get : "/indexer/nft/v1/collections/by_account/{account}"
    };
  }

  // TokensByACcount queries all the NFTs of an account
  rpc TokensByAccount(QueryTokensByAccountRequest)
      returns (QueryTokensResponse) {
    option (google.api.http) = {
      get : "/indexer/nft/v1/tokens/by_account/{account}"
    };
  }

  // TokensByCollection queries all the NFTs of a collection
  rpc TokensByCollection(QueryTokensByCollectionRequest)
      returns (QueryTokensResponse) {
    option (google.api.http) = {
      get : "/indexer/nft/v1/tokens/by_collection/{collection_addr}"
    };
  }
}

// QueryCollectionRequest is the request type for the Query/Collection RPC
// method
message QueryCollectionRequest {
  string collection_addr = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// QueryCollectionResponse is the response type for the Query/Collection RPC
// method
message QueryCollectionResponse { IndexedCollection collection = 1; }

// QueryCollectionsRequest is the request type for the Query/Collections RPC
// method
message QueryCollectionsByAccountRequest {
  string account = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryCollectionsResponse is the response type for the Query/Collections RPC
// method
message QueryCollectionsResponse {
  repeated IndexedCollection collections = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryTokensByAccountRequest is the request type for the Query/Tokens RPC
// method
message QueryTokensByAccountRequest {
  string account = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string collection_addr = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string token_id = 3;
  cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

// QueryTokensByCollectionRequest is the request type for the Query/Tokens RPC
// method
message QueryTokensByCollectionRequest {
  string collection_addr = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string token_id = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

// QueryTokensResponse is the response type for the Query/Tokens RPC method
message QueryTokensResponse {
  repeated IndexedToken tokens = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: indexer/block/v1/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Block represents a indexed block in a blockchain
type Block struct {
	ChainId   string                                   `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Height    int64                                    `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Hash      string                                   `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	BlockTime int64                                    `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	Timestamp time.Time                                `protobuf:"bytes,5,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	GasUsed   int64                                    `protobuf:"varint,6,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	GasWanted int64                                    `protobuf:"varint,7,opt,name=gas_wanted,json=gasWanted,proto3" json:"gas_wanted,omitempty"`
	TxCount   int64                                    `protobuf:"varint,8,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	TotalFee  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,9,rep,name=total_fee,json=totalFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_fee"`
	Proposer  *Proposer                                `protobuf:"bytes,10,opt,name=proposer,proto3" json:"proposer,omitempty"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68c017db5c3bfab, []int{0}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return m.Size()
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

// Proposer represents the proposer of a block: for minitia, it is the L2
// operator
type Proposer struct {
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// actually minitias have no identity because they haven't MsgCreateValidator,
	// but we decided to keep this field for compatibility with L1
	Identity        string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	OperatorAddress string `protobuf:"bytes,3,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
}

func (m *Proposer) Reset()         { *m = Proposer{} }
func (m *Proposer) String() string { return proto.CompactTextString(m) }
func (*Proposer) ProtoMessage()    {}
func (*Proposer) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68c017db5c3bfab, []int{1}
}
func (m *Proposer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposer.Merge(m, src)
}
func (m *Proposer) XXX_Size() int {
	return m.Size()
}
func (m *Proposer) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposer.DiscardUnknown(m)
}

var xxx_messageInfo_Proposer proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Block)(nil), "indexer.block.v1.Block")
	proto.RegisterType((*Proposer)(nil), "indexer.block.v1.Proposer")
}

func init() { proto.RegisterFile("indexer/block/v1/types.proto", fileDescriptor_e68c017db5c3bfab) }

var fileDescriptor_e68c017db5c3bfab = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x53, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0xdd, 0xb0, 0x6d, 0x37, 0xeb, 0x22, 0x51, 0x2c, 0x84, 0xd2, 0x15, 0x64, 0x57, 0x3d, 0x2d,
	0x95, 0x6a, 0x6b, 0x8b, 0x04, 0x67, 0xb6, 0x52, 0x25, 0x6e, 0x28, 0x2a, 0x42, 0x70, 0x89, 0x9c,
	0x64, 0x9a, 0x58, 0x9b, 0xc4, 0x51, 0xec, 0x2c, 0xed, 0x85, 0x6f, 0xe8, 0x99, 0x2f, 0xa8, 0x38,
	0xf5, 0x0b, 0x38, 0xf7, 0xd8, 0x23, 0x27, 0x0a, 0xdb, 0x43, 0x7f, 0x03, 0xd9, 0x71, 0x16, 0xc4,
	0x25, 0xf1, 0x7b, 0xf3, 0x46, 0x33, 0xf3, 0xc6, 0x46, 0xcf, 0x78, 0x99, 0xc0, 0x19, 0xd4, 0x34,
	0xca, 0x45, 0xbc, 0xa0, 0xcb, 0x19, 0x55, 0xe7, 0x15, 0x48, 0x52, 0xd5, 0x42, 0x09, 0xbc, 0x63,
	0xa3, 0xc4, 0x44, 0xc9, 0x72, 0x36, 0x7a, 0x92, 0x8a, 0x54, 0x98, 0x20, 0xd5, 0xa7, 0x56, 0x37,
	0x7a, 0xcc, 0x0a, 0x5e, 0x0a, 0x6a, 0xbe, 0x96, 0x1a, 0xa7, 0x42, 0xa4, 0x39, 0x50, 0x83, 0xa2,
	0xe6, 0x94, 0x2a, 0x5e, 0x80, 0x54, 0xac, 0xa8, 0xac, 0xc0, 0x8f, 0x85, 0x2c, 0x84, 0xa4, 0x11,
	0x93, 0x40, 0x97, 0xb3, 0x08, 0x14, 0x9b, 0xd1, 0x58, 0xf0, 0xb2, 0x8d, 0xef, 0x7d, 0xef, 0xa3,
	0xcd, 0xb9, 0x2e, 0x8b, 0x77, 0x91, 0x1b, 0x67, 0x8c, 0x97, 0x21, 0x4f, 0x3c, 0x67, 0xe2, 0x4c,
	0x87, 0xc1, 0xc0, 0xe0, 0xb7, 0x09, 0x7e, 0x8a, 0xb6, 0x32, 0xe0, 0x69, 0xa6, 0xbc, 0x07, 0x13,
	0x67, 0xda, 0x0f, 0x2c, 0xc2, 0x18, 0x6d, 0x64, 0x4c, 0x66, 0x5e, 0xdf, 0xc8, 0xcd, 0x19, 0x3f,
	0x47, 0xc8, 0x8c, 0x11, 0xea, 0x4e, 0xbc, 0x0d, 0xa3, 0x1f, 0x1a, 0xe6, 0x84, 0x17, 0x80, 0xe7,
	0x68, 0xb8, 0x6e, 0xd1, 0xdb, 0x9c, 0x38, 0xd3, 0xed, 0xc3, 0x11, 0x69, 0x87, 0x20, 0xdd, 0x10,
	0xe4, 0xa4, 0x53, 0xcc, 0xdd, 0xeb, 0x9f, 0xe3, 0xde, 0xc5, 0xed, 0xd8, 0x09, 0xfe, 0xa6, 0xe9,
	0x4e, 0x53, 0x26, 0xc3, 0x46, 0x42, 0xe2, 0x6d, 0x99, 0x02, 0x83, 0x94, 0xc9, 0xf7, 0x12, 0x12,
	0x5d, 0x5d, 0x87, 0x3e, 0xb3, 0x52, 0x41, 0xe2, 0x0d, 0xda, 0xea, 0x29, 0x93, 0x1f, 0x0c, 0xa1,
	0x33, 0xd5, 0x59, 0x18, 0x8b, 0xa6, 0x54, 0x9e, 0xdb, 0x66, 0xaa, 0xb3, 0x23, 0x0d, 0xf1, 0x17,
	0x34, 0x54, 0x42, 0xb1, 0x3c, 0x3c, 0x05, 0xf0, 0x86, 0x93, 0xfe, 0x74, 0xfb, 0x70, 0x97, 0xb4,
	0xe6, 0x11, 0x6d, 0x1e, 0xb1, 0xe6, 0x91, 0x23, 0xc1, 0xcb, 0xf9, 0xb1, 0xee, 0xeb, 0xdb, 0xed,
	0x78, 0x9a, 0x72, 0x95, 0x35, 0x11, 0x89, 0x45, 0x41, 0xad, 0xd3, 0xed, 0xef, 0x40, 0x26, 0x0b,
	0xbb, 0x64, 0x9d, 0x20, 0xbf, 0xde, 0x5f, 0xed, 0x3f, 0xcc, 0x21, 0x65, 0xf1, 0x79, 0xa8, 0xed,
	0x97, 0x97, 0xf7, 0x57, 0xfb, 0x4e, 0xe0, 0x9a, 0x9a, 0xc7, 0x00, 0xf8, 0x15, 0x72, 0xab, 0x5a,
	0x54, 0x42, 0x42, 0xed, 0x21, 0xeb, 0xcb, 0xff, 0xf7, 0x82, 0xbc, 0xb3, 0x8a, 0x60, 0xad, 0xdd,
	0x5b, 0x20, 0xb7, 0x63, 0xb1, 0x87, 0x06, 0x85, 0x28, 0xf9, 0x02, 0xea, 0x6e, 0x83, 0x16, 0xe2,
	0x11, 0x72, 0x79, 0x02, 0xa5, 0xe2, 0xea, 0xdc, 0xec, 0x70, 0x18, 0xac, 0x31, 0x7e, 0x81, 0x76,
	0x44, 0x05, 0x35, 0x53, 0xa2, 0x0e, 0x59, 0x92, 0xd4, 0x20, 0xa5, 0xdd, 0xe8, 0xa3, 0x8e, 0x7f,
	0xd3, 0xd2, 0xf3, 0x8f, 0xd7, 0xbf, 0xfd, 0xde, 0xe5, 0xca, 0x77, 0xae, 0x57, 0xbe, 0x73, 0xb3,
	0xf2, 0x9d, 0x5f, 0x2b, 0xdf, 0xb9, 0xb8, 0xf3, 0x7b, 0x37, 0x77, 0x7e, 0xef, 0xc7, 0x9d, 0xdf,
	0xfb, 0xf4, 0xfa, 0x1f, 0x43, 0x78, 0xc9, 0x15, 0x67, 0x07, 0x39, 0x8b, 0x24, 0x5d, 0x2c, 0xbb,
	0x27, 0x20, 0x9b, 0xa8, 0x10, 0x49, 0x93, 0x83, 0xb4, 0xaf, 0xc1, 0xb8, 0x14, 0x6d, 0x99, 0xed,
	0xbf, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x14, 0x2e, 0x7e, 0x2b, 0x03, 0x00, 0x00,
}

func (this *Block) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Block)
	if !ok {
		that2, ok := that.(Block)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.BlockTime != that1.BlockTime {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if this.GasUsed != that1.GasUsed {
		return false
	}
	if this.GasWanted != that1.GasWanted {
		return false
	}
	if this.TxCount != that1.TxCount {
		return false
	}
	if len(this.TotalFee) != len(that1.TotalFee) {
		return false
	}
	for i := range this.TotalFee {
		if !this.TotalFee[i].Equal(&that1.TotalFee[i]) {
			return false
		}
	}
	if !this.Proposer.Equal(that1.Proposer) {
		return false
	}
	return true
}
func (this *Proposer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Proposer)
	if !ok {
		that2, ok := that.(Proposer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Moniker != that1.Moniker {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.OperatorAddress != that1.OperatorAddress {
		return false
	}
	return true
}
func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proposer != nil {
		{
			size, err := m.Proposer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.TotalFee) > 0 {
		for iNdEx := len(m.TotalFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.TxCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TxCount))
		i--
		dAtA[i] = 0x40
	}
	if m.GasWanted != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GasWanted))
		i--
		dAtA[i] = 0x38
	}
	if m.GasUsed != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x30
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTypes(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if m.BlockTime != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proposer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BlockTime != 0 {
		n += 1 + sovTypes(uint64(m.BlockTime))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovTypes(uint64(l))
	if m.GasUsed != 0 {
		n += 1 + sovTypes(uint64(m.GasUsed))
	}
	if m.GasWanted != 0 {
		n += 1 + sovTypes(uint64(m.GasWanted))
	}
	if m.TxCount != 0 {
		n += 1 + sovTypes(uint64(m.TxCount))
	}
	if len(m.TotalFee) > 0 {
		for _, e := range m.TotalFee {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Proposer != nil {
		l = m.Proposer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Proposer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			m.BlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasWanted", wireType)
			}
			m.GasWanted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasWanted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCount", wireType)
			}
			m.TxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalFee = append(m.TotalFee, types.Coin{})
			if err := m.TotalFee[len(m.TotalFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposer == nil {
				m.Proposer = &Proposer{}
			}
			if err := m.Proposer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

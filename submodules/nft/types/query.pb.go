// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: indexer/nft/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryCollectionRequest is the request type for the Query/Collection RPC method
type QueryCollectionRequest struct {
	CollectionAddr string `protobuf:"bytes,1,opt,name=collection_addr,json=collectionAddr,proto3" json:"collection_addr,omitempty"`
}

func (m *QueryCollectionRequest) Reset()         { *m = QueryCollectionRequest{} }
func (m *QueryCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCollectionRequest) ProtoMessage()    {}
func (*QueryCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_244ebe53b76c6658, []int{0}
}
func (m *QueryCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectionRequest.Merge(m, src)
}
func (m *QueryCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectionRequest proto.InternalMessageInfo

func (m *QueryCollectionRequest) GetCollectionAddr() string {
	if m != nil {
		return m.CollectionAddr
	}
	return ""
}

// QueryCollectionResponse is the response type for the Query/Collection RPC method
type QueryCollectionResponse struct {
	Collection *IndexedCollection `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (m *QueryCollectionResponse) Reset()         { *m = QueryCollectionResponse{} }
func (m *QueryCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCollectionResponse) ProtoMessage()    {}
func (*QueryCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_244ebe53b76c6658, []int{1}
}
func (m *QueryCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectionResponse.Merge(m, src)
}
func (m *QueryCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectionResponse proto.InternalMessageInfo

func (m *QueryCollectionResponse) GetCollection() *IndexedCollection {
	if m != nil {
		return m.Collection
	}
	return nil
}

// QueryCollectionsRequest is the request type for the Query/Collections RPC method
type QueryCollectionsByAccountRequest struct {
	Account    string             `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCollectionsByAccountRequest) Reset()         { *m = QueryCollectionsByAccountRequest{} }
func (m *QueryCollectionsByAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCollectionsByAccountRequest) ProtoMessage()    {}
func (*QueryCollectionsByAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_244ebe53b76c6658, []int{2}
}
func (m *QueryCollectionsByAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectionsByAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectionsByAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectionsByAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectionsByAccountRequest.Merge(m, src)
}
func (m *QueryCollectionsByAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectionsByAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectionsByAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectionsByAccountRequest proto.InternalMessageInfo

func (m *QueryCollectionsByAccountRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *QueryCollectionsByAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryCollectionsResponse is the response type for the Query/Collections RPC method
type QueryCollectionsResponse struct {
	Collections []*IndexedCollection `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
	Pagination  *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCollectionsResponse) Reset()         { *m = QueryCollectionsResponse{} }
func (m *QueryCollectionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCollectionsResponse) ProtoMessage()    {}
func (*QueryCollectionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_244ebe53b76c6658, []int{3}
}
func (m *QueryCollectionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectionsResponse.Merge(m, src)
}
func (m *QueryCollectionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectionsResponse proto.InternalMessageInfo

func (m *QueryCollectionsResponse) GetCollections() []*IndexedCollection {
	if m != nil {
		return m.Collections
	}
	return nil
}

func (m *QueryCollectionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokensByAccountRequest is the request type for the Query/Tokens RPC method
type QueryTokensByAccountRequest struct {
	Account        string             `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	CollectionAddr string             `protobuf:"bytes,2,opt,name=collection_addr,json=collectionAddr,proto3" json:"collection_addr,omitempty"`
	TokenId        string             `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Pagination     *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokensByAccountRequest) Reset()         { *m = QueryTokensByAccountRequest{} }
func (m *QueryTokensByAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokensByAccountRequest) ProtoMessage()    {}
func (*QueryTokensByAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_244ebe53b76c6658, []int{4}
}
func (m *QueryTokensByAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokensByAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokensByAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokensByAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokensByAccountRequest.Merge(m, src)
}
func (m *QueryTokensByAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokensByAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokensByAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokensByAccountRequest proto.InternalMessageInfo

func (m *QueryTokensByAccountRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *QueryTokensByAccountRequest) GetCollectionAddr() string {
	if m != nil {
		return m.CollectionAddr
	}
	return ""
}

func (m *QueryTokensByAccountRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *QueryTokensByAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokensByCollectionRequest is the request type for the Query/Tokens RPC method
type QueryTokensByCollectionRequest struct {
	CollectionAddr string             `protobuf:"bytes,1,opt,name=collection_addr,json=collectionAddr,proto3" json:"collection_addr,omitempty"`
	TokenId        string             `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Pagination     *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokensByCollectionRequest) Reset()         { *m = QueryTokensByCollectionRequest{} }
func (m *QueryTokensByCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokensByCollectionRequest) ProtoMessage()    {}
func (*QueryTokensByCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_244ebe53b76c6658, []int{5}
}
func (m *QueryTokensByCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokensByCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokensByCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokensByCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokensByCollectionRequest.Merge(m, src)
}
func (m *QueryTokensByCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokensByCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokensByCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokensByCollectionRequest proto.InternalMessageInfo

func (m *QueryTokensByCollectionRequest) GetCollectionAddr() string {
	if m != nil {
		return m.CollectionAddr
	}
	return ""
}

func (m *QueryTokensByCollectionRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *QueryTokensByCollectionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokensResponse is the response type for the Query/Tokens RPC method
type QueryTokensResponse struct {
	Tokens     []*IndexedToken     `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokensResponse) Reset()         { *m = QueryTokensResponse{} }
func (m *QueryTokensResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokensResponse) ProtoMessage()    {}
func (*QueryTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_244ebe53b76c6658, []int{6}
}
func (m *QueryTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokensResponse.Merge(m, src)
}
func (m *QueryTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokensResponse proto.InternalMessageInfo

func (m *QueryTokensResponse) GetTokens() []*IndexedToken {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *QueryTokensResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryCollectionRequest)(nil), "indexer.nft.v1.QueryCollectionRequest")
	proto.RegisterType((*QueryCollectionResponse)(nil), "indexer.nft.v1.QueryCollectionResponse")
	proto.RegisterType((*QueryCollectionsByAccountRequest)(nil), "indexer.nft.v1.QueryCollectionsByAccountRequest")
	proto.RegisterType((*QueryCollectionsResponse)(nil), "indexer.nft.v1.QueryCollectionsResponse")
	proto.RegisterType((*QueryTokensByAccountRequest)(nil), "indexer.nft.v1.QueryTokensByAccountRequest")
	proto.RegisterType((*QueryTokensByCollectionRequest)(nil), "indexer.nft.v1.QueryTokensByCollectionRequest")
	proto.RegisterType((*QueryTokensResponse)(nil), "indexer.nft.v1.QueryTokensResponse")
}

func init() { proto.RegisterFile("indexer/nft/v1/query.proto", fileDescriptor_244ebe53b76c6658) }

var fileDescriptor_244ebe53b76c6658 = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0x4f, 0x6b, 0x13, 0x4f,
	0x18, 0xc7, 0x3b, 0xe9, 0xaf, 0xed, 0xcf, 0x29, 0xb4, 0x30, 0x16, 0xdd, 0xae, 0x65, 0xa9, 0x11,
	0xda, 0x62, 0xc9, 0x4e, 0x93, 0x5a, 0xe9, 0x49, 0x48, 0x0a, 0x4a, 0x4f, 0x6a, 0xf4, 0xa4, 0x42,
	0xd8, 0x3f, 0xd3, 0x75, 0x69, 0xb2, 0x93, 0xee, 0xcc, 0x06, 0x43, 0xe9, 0xc5, 0x57, 0x20, 0x98,
	0x83, 0x27, 0xcf, 0x0a, 0x1e, 0x7d, 0x0d, 0xe2, 0xb1, 0xe8, 0xc5, 0xa3, 0x24, 0xbe, 0x07, 0xaf,
	0xb2, 0xb3, 0x93, 0xec, 0x66, 0xb3, 0x4d, 0xaa, 0xb4, 0xb7, 0x9d, 0x99, 0xe7, 0x3b, 0xcf, 0xe7,
	0xf9, 0x37, 0x0b, 0x55, 0xd7, 0xb3, 0xc9, 0x2b, 0xe2, 0x63, 0xef, 0x80, 0xe3, 0x56, 0x11, 0x1f,
	0x05, 0xc4, 0x6f, 0xeb, 0x4d, 0x9f, 0x72, 0x8a, 0x16, 0xe4, 0x99, 0xee, 0x1d, 0x70, 0xbd, 0x55,
	0x54, 0x6f, 0x5b, 0x94, 0x35, 0x28, 0xc3, 0xa6, 0xc1, 0x48, 0x64, 0x88, 0x5b, 0x45, 0x93, 0x70,
	0xa3, 0x88, 0x9b, 0x86, 0xe3, 0x7a, 0x06, 0x77, 0xa9, 0x17, 0x69, 0xd5, 0x25, 0x87, 0x3a, 0x54,
	0x7c, 0xe2, 0xf0, 0x4b, 0xee, 0xae, 0x38, 0x94, 0x3a, 0x75, 0x82, 0x8d, 0xa6, 0x8b, 0x0d, 0xcf,
	0xa3, 0x5c, 0x48, 0x98, 0x3c, 0x5d, 0x8e, 0xee, 0xaf, 0x45, 0xb2, 0x68, 0x21, 0x8f, 0xd2, 0x98,
	0xbc, 0xdd, 0x24, 0xf2, 0x2c, 0xff, 0x1c, 0x5e, 0x7b, 0x1c, 0xc2, 0xec, 0xd1, 0x7a, 0x9d, 0x58,
	0xe1, 0x85, 0x55, 0x72, 0x14, 0x10, 0xc6, 0x51, 0x19, 0x2e, 0x5a, 0x83, 0xcd, 0x9a, 0x61, 0xdb,
	0xbe, 0x02, 0x56, 0xc1, 0xc6, 0x95, 0x8a, 0xf2, 0xed, 0x73, 0x61, 0x49, 0x3a, 0x28, 0xdb, 0xb6,
	0x4f, 0x18, 0x7b, 0xc2, 0x7d, 0xd7, 0x73, 0xaa, 0x0b, 0xb1, 0x20, 0x3c, 0xc8, 0xbf, 0x80, 0xd7,
	0x47, 0x2e, 0x67, 0x4d, 0xea, 0x31, 0x82, 0xca, 0x10, 0xc6, 0xc6, 0xe2, 0xe2, 0xf9, 0xd2, 0x4d,
	0x7d, 0x38, 0x67, 0xfa, 0xbe, 0x58, 0xda, 0x09, 0x79, 0x42, 0x94, 0x7f, 0x0f, 0xe0, 0x6a, 0xea,
	0x7a, 0x56, 0x69, 0x97, 0x2d, 0x8b, 0x06, 0x1e, 0xef, 0x47, 0x51, 0x82, 0x73, 0x46, 0xb4, 0x33,
	0x91, 0xbe, 0x6f, 0x88, 0xee, 0x43, 0x18, 0x97, 0x44, 0xc9, 0x09, 0xb6, 0x35, 0x5d, 0x6a, 0xc2,
	0xfa, 0xe9, 0x51, 0xa1, 0x65, 0xfd, 0xf4, 0x47, 0x86, 0x43, 0xa4, 0xbf, 0x6a, 0x42, 0x99, 0xff,
	0x00, 0xa0, 0x92, 0x06, 0x1c, 0x24, 0x60, 0x0f, 0xce, 0xc7, 0xb1, 0x30, 0x05, 0xac, 0x4e, 0x9f,
	0x2f, 0x03, 0x49, 0x15, 0x7a, 0x90, 0x41, 0xba, 0x3e, 0x91, 0x34, 0x22, 0x18, 0x42, 0xfd, 0x0d,
	0xe0, 0x0d, 0x81, 0xfa, 0x94, 0x1e, 0x92, 0x0b, 0x4a, 0x63, 0x46, 0x03, 0xe5, 0xfe, 0xae, 0x81,
	0xd0, 0x32, 0xfc, 0x9f, 0x87, 0x40, 0x35, 0xd7, 0x56, 0xa6, 0x43, 0x6d, 0x75, 0x4e, 0xac, 0xf7,
	0xed, 0x54, 0x91, 0xfe, 0xfb, 0xe7, 0x22, 0x7d, 0x01, 0x50, 0x1b, 0x8a, 0xfc, 0x32, 0x26, 0x61,
	0x28, 0x90, 0xdc, 0xe5, 0x04, 0xd2, 0x01, 0xf0, 0x6a, 0x22, 0x90, 0x41, 0xa3, 0xdd, 0x81, 0xb3,
	0xc2, 0x55, 0xbf, 0xc7, 0x56, 0xce, 0xe8, 0x31, 0x21, 0xab, 0x4a, 0xdb, 0x0b, 0xeb, 0xac, 0x52,
	0x67, 0x06, 0xce, 0x08, 0x2c, 0xd4, 0x01, 0x10, 0xc6, 0xc9, 0x45, 0x6b, 0x69, 0x8e, 0xec, 0x77,
	0x48, 0x5d, 0x9f, 0x68, 0x17, 0x79, 0xcd, 0xef, 0xbc, 0xfe, 0xfe, 0xeb, 0x6d, 0x0e, 0xa3, 0x02,
	0x4e, 0xbd, 0x77, 0x89, 0x89, 0xc1, 0xc7, 0xa9, 0x4a, 0x9e, 0xa0, 0x4f, 0x00, 0x2e, 0x65, 0xbd,
	0x20, 0x68, 0x6b, 0x82, 0xe3, 0x91, 0x29, 0x51, 0x37, 0x26, 0x29, 0x06, 0xac, 0xbb, 0x82, 0xb5,
	0x84, 0xb6, 0xc6, 0xb1, 0x9a, 0xed, 0x9a, 0x9c, 0x25, 0x7c, 0x2c, 0x3f, 0x4e, 0xd0, 0x3b, 0x00,
	0x17, 0x53, 0x43, 0x8a, 0x36, 0x33, 0xfd, 0x66, 0x8f, 0xb2, 0x7a, 0x6b, 0x8c, 0xf1, 0x80, 0x6f,
	0x5b, 0xf0, 0x15, 0xd0, 0x66, 0x9a, 0x2f, 0x6a, 0x8f, 0x6c, 0xb4, 0x8f, 0x00, 0xa2, 0xd1, 0x29,
	0x42, 0xfa, 0x58, 0xba, 0xd1, 0x82, 0x9f, 0x0b, 0xf0, 0x9e, 0x00, 0xdc, 0x45, 0x77, 0xcf, 0x06,
	0x8c, 0x53, 0x39, 0x5a, 0xf5, 0xca, 0xc3, 0xaf, 0x5d, 0x0d, 0x9c, 0x76, 0x35, 0xf0, 0xb3, 0xab,
	0x81, 0x37, 0x3d, 0x6d, 0xea, 0xb4, 0xa7, 0x4d, 0xfd, 0xe8, 0x69, 0x53, 0xcf, 0x76, 0x1c, 0x97,
	0xbf, 0x0c, 0x4c, 0xdd, 0xa2, 0x0d, 0xec, 0x7a, 0x2e, 0x77, 0x8d, 0x42, 0xdd, 0x30, 0x19, 0x3e,
	0x6c, 0xf5, 0x3d, 0xb1, 0xc0, 0x6c, 0x50, 0x3b, 0xa8, 0x13, 0x26, 0x9c, 0x8a, 0xdf, 0xa9, 0x39,
	0x2b, 0xfe, 0xa7, 0xdb, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x01, 0x76, 0x90, 0xbc, 0x14, 0x08,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Collection queries a collection by its address
	Collection(ctx context.Context, in *QueryCollectionRequest, opts ...grpc.CallOption) (*QueryCollectionResponse, error)
	// Collections queries all the collections of an account
	CollectionsByAccount(ctx context.Context, in *QueryCollectionsByAccountRequest, opts ...grpc.CallOption) (*QueryCollectionsResponse, error)
	// TokensByACcount queries all the NFTs of an account
	TokensByAccount(ctx context.Context, in *QueryTokensByAccountRequest, opts ...grpc.CallOption) (*QueryTokensResponse, error)
	// TokensByCollection queries all the NFTs of a collection
	TokensByCollection(ctx context.Context, in *QueryTokensByCollectionRequest, opts ...grpc.CallOption) (*QueryTokensResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Collection(ctx context.Context, in *QueryCollectionRequest, opts ...grpc.CallOption) (*QueryCollectionResponse, error) {
	out := new(QueryCollectionResponse)
	err := c.cc.Invoke(ctx, "/indexer.nft.v1.Query/Collection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollectionsByAccount(ctx context.Context, in *QueryCollectionsByAccountRequest, opts ...grpc.CallOption) (*QueryCollectionsResponse, error) {
	out := new(QueryCollectionsResponse)
	err := c.cc.Invoke(ctx, "/indexer.nft.v1.Query/CollectionsByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokensByAccount(ctx context.Context, in *QueryTokensByAccountRequest, opts ...grpc.CallOption) (*QueryTokensResponse, error) {
	out := new(QueryTokensResponse)
	err := c.cc.Invoke(ctx, "/indexer.nft.v1.Query/TokensByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokensByCollection(ctx context.Context, in *QueryTokensByCollectionRequest, opts ...grpc.CallOption) (*QueryTokensResponse, error) {
	out := new(QueryTokensResponse)
	err := c.cc.Invoke(ctx, "/indexer.nft.v1.Query/TokensByCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Collection queries a collection by its address
	Collection(context.Context, *QueryCollectionRequest) (*QueryCollectionResponse, error)
	// Collections queries all the collections of an account
	CollectionsByAccount(context.Context, *QueryCollectionsByAccountRequest) (*QueryCollectionsResponse, error)
	// TokensByACcount queries all the NFTs of an account
	TokensByAccount(context.Context, *QueryTokensByAccountRequest) (*QueryTokensResponse, error)
	// TokensByCollection queries all the NFTs of a collection
	TokensByCollection(context.Context, *QueryTokensByCollectionRequest) (*QueryTokensResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Collection(ctx context.Context, req *QueryCollectionRequest) (*QueryCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collection not implemented")
}
func (*UnimplementedQueryServer) CollectionsByAccount(ctx context.Context, req *QueryCollectionsByAccountRequest) (*QueryCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionsByAccount not implemented")
}
func (*UnimplementedQueryServer) TokensByAccount(ctx context.Context, req *QueryTokensByAccountRequest) (*QueryTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokensByAccount not implemented")
}
func (*UnimplementedQueryServer) TokensByCollection(ctx context.Context, req *QueryTokensByCollectionRequest) (*QueryTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokensByCollection not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Collection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Collection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexer.nft.v1.Query/Collection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Collection(ctx, req.(*QueryCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollectionsByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollectionsByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollectionsByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexer.nft.v1.Query/CollectionsByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollectionsByAccount(ctx, req.(*QueryCollectionsByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokensByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokensByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokensByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexer.nft.v1.Query/TokensByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokensByAccount(ctx, req.(*QueryTokensByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokensByCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokensByCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokensByCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexer.nft.v1.Query/TokensByCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokensByCollection(ctx, req.(*QueryTokensByCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "indexer.nft.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collection",
			Handler:    _Query_Collection_Handler,
		},
		{
			MethodName: "CollectionsByAccount",
			Handler:    _Query_CollectionsByAccount_Handler,
		},
		{
			MethodName: "TokensByAccount",
			Handler:    _Query_TokensByAccount_Handler,
		},
		{
			MethodName: "TokensByCollection",
			Handler:    _Query_TokensByCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indexer/nft/v1/query.proto",
}

func (m *QueryCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CollectionAddr) > 0 {
		i -= len(m.CollectionAddr)
		copy(dAtA[i:], m.CollectionAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Collection != nil {
		{
			size, err := m.Collection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectionsByAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectionsByAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectionsByAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Collections) > 0 {
		for iNdEx := len(m.Collections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokensByAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokensByAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokensByAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CollectionAddr) > 0 {
		i -= len(m.CollectionAddr)
		copy(dAtA[i:], m.CollectionAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokensByCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokensByCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokensByCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionAddr) > 0 {
		i -= len(m.CollectionAddr)
		copy(dAtA[i:], m.CollectionAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Collection != nil {
		l = m.Collection.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCollectionsByAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCollectionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Collections) > 0 {
		for _, e := range m.Collections {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokensByAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollectionAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokensByCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collection == nil {
				m.Collection = &IndexedCollection{}
			}
			if err := m.Collection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectionsByAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectionsByAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectionsByAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collections = append(m.Collections, &IndexedCollection{})
			if err := m.Collections[len(m.Collections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokensByAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokensByAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokensByAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokensByCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokensByCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokensByCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &IndexedToken{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

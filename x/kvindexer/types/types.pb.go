// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: indexer/info/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SubmoduleVersion defines the version of the submodule
type SubmoduleVersion struct {
	Submodule string `protobuf:"bytes,1,opt,name=submodule,proto3" json:"submodule,omitempty"`
	Version   string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *SubmoduleVersion) Reset()         { *m = SubmoduleVersion{} }
func (m *SubmoduleVersion) String() string { return proto.CompactTextString(m) }
func (*SubmoduleVersion) ProtoMessage()    {}
func (*SubmoduleVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_07f8f35a2cd80b30, []int{0}
}
func (m *SubmoduleVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmoduleVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmoduleVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmoduleVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmoduleVersion.Merge(m, src)
}
func (m *SubmoduleVersion) XXX_Size() int {
	return m.Size()
}
func (m *SubmoduleVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmoduleVersion.DiscardUnknown(m)
}

var xxx_messageInfo_SubmoduleVersion proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SubmoduleVersion)(nil), "indexer.info.SubmoduleVersion")
}

func init() { proto.RegisterFile("indexer/info/types.proto", fileDescriptor_07f8f35a2cd80b30) }

var fileDescriptor_07f8f35a2cd80b30 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4e, 0xc3, 0x40,
	0x10, 0x45, 0xbd, 0x14, 0xa0, 0x58, 0x14, 0x60, 0x51, 0x58, 0x11, 0x5a, 0x10, 0x15, 0x0d, 0x1e,
	0x05, 0x6e, 0x40, 0x49, 0x09, 0x88, 0x82, 0x6e, 0xd7, 0x99, 0x98, 0x11, 0xde, 0x1d, 0xcb, 0xbb,
	0xb6, 0xc2, 0x2d, 0x38, 0x06, 0x47, 0x49, 0x99, 0x92, 0x12, 0xec, 0x8b, 0xa0, 0xac, 0x6d, 0x91,
	0x66, 0xf4, 0xff, 0x7f, 0xbf, 0x18, 0xfd, 0x38, 0x25, 0xbb, 0xc4, 0x35, 0xd6, 0x40, 0x76, 0xc5,
	0xe0, 0x3f, 0x2a, 0x74, 0x59, 0x55, 0xb3, 0xe7, 0xe4, 0x78, 0x24, 0xd9, 0x8e, 0xcc, 0xcf, 0x0a,
	0x2e, 0x38, 0x00, 0xd8, 0xa9, 0xa1, 0x33, 0x3f, 0x55, 0x86, 0x2c, 0x43, 0xb8, 0x63, 0x74, 0x51,
	0x30, 0x17, 0x25, 0x42, 0x70, 0xba, 0x59, 0x81, 0x27, 0x83, 0xce, 0x2b, 0x53, 0x8d, 0x05, 0x99,
	0xb3, 0x33, 0xec, 0x40, 0x2b, 0x87, 0xd0, 0x2e, 0x34, 0x7a, 0xb5, 0x80, 0x9c, 0xc9, 0x0e, 0xfc,
	0xea, 0x21, 0x3e, 0x79, 0x6a, 0xb4, 0xe1, 0x65, 0x53, 0xe2, 0x0b, 0xd6, 0x8e, 0xd8, 0x26, 0xe7,
	0xf1, 0xcc, 0x4d, 0x59, 0x2a, 0x2e, 0xc5, 0xf5, 0xec, 0xf1, 0x3f, 0x48, 0xd2, 0xf8, 0xa8, 0x1d,
	0x8a, 0xe9, 0x41, 0x60, 0x93, 0xbd, 0x7f, 0xde, 0xfc, 0xca, 0xe8, 0xab, 0x93, 0x62, 0xd3, 0x49,
	0xb1, 0xed, 0xa4, 0xf8, 0xe9, 0xa4, 0xf8, 0xec, 0x65, 0xb4, 0xed, 0x65, 0xf4, 0xdd, 0xcb, 0xe8,
	0xf5, 0xb6, 0x20, 0xff, 0xd6, 0xe8, 0x2c, 0x67, 0x03, 0x64, 0xc9, 0x93, 0xba, 0x29, 0x95, 0x76,
	0xf0, 0xde, 0x4e, 0xc3, 0xac, 0xf7, 0x74, 0xd8, 0x47, 0x1f, 0x86, 0x47, 0xef, 0xfe, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x9f, 0xcb, 0x8f, 0x4b, 0x3c, 0x01, 0x00, 0x00,
}

func (this *SubmoduleVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmoduleVersion)
	if !ok {
		that2, ok := that.(SubmoduleVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Submodule != that1.Submodule {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (m *SubmoduleVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmoduleVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmoduleVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Submodule) > 0 {
		i -= len(m.Submodule)
		copy(dAtA[i:], m.Submodule)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Submodule)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubmoduleVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Submodule)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubmoduleVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmoduleVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmoduleVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submodule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submodule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

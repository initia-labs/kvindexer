// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: indexer/dashboard/v1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AccountsPerHeight is a struct that holds the account addresses for a given height
// NOTE: not all address are guaranteed to be present in the list. it's just a representation format
type AccountsPerHeight struct {
	Height   int64    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Accounts []string `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (m *AccountsPerHeight) Reset()         { *m = AccountsPerHeight{} }
func (m *AccountsPerHeight) String() string { return proto.CompactTextString(m) }
func (*AccountsPerHeight) ProtoMessage()    {}
func (*AccountsPerHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee67c7cc4eee856e, []int{0}
}
func (m *AccountsPerHeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountsPerHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountsPerHeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountsPerHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountsPerHeight.Merge(m, src)
}
func (m *AccountsPerHeight) XXX_Size() int {
	return m.Size()
}
func (m *AccountsPerHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountsPerHeight.DiscardUnknown(m)
}

var xxx_messageInfo_AccountsPerHeight proto.InternalMessageInfo

// ChartData is a struct that holds the data for the dashboard chart
type ChartData struct {
	Date             string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	TotalValueLocked int64  `protobuf:"varint,2,opt,name=total_value_locked,json=totalValueLocked,proto3" json:"total_value_locked,omitempty"`
	TxCount          int64  `protobuf:"varint,3,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	ActiveAccounts   int64  `protobuf:"varint,4,opt,name=active_accounts,json=activeAccounts,proto3" json:"active_accounts,omitempty"`
	NewAccounts      int64  `protobuf:"varint,5,opt,name=new_accounts,json=newAccounts,proto3" json:"new_accounts,omitempty"`
}

func (m *ChartData) Reset()         { *m = ChartData{} }
func (m *ChartData) String() string { return proto.CompactTextString(m) }
func (*ChartData) ProtoMessage()    {}
func (*ChartData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee67c7cc4eee856e, []int{1}
}
func (m *ChartData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChartData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChartData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChartData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChartData.Merge(m, src)
}
func (m *ChartData) XXX_Size() int {
	return m.Size()
}
func (m *ChartData) XXX_DiscardUnknown() {
	xxx_messageInfo_ChartData.DiscardUnknown(m)
}

var xxx_messageInfo_ChartData proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AccountsPerHeight)(nil), "indexer.dashboard.v1.AccountsPerHeight")
	proto.RegisterType((*ChartData)(nil), "indexer.dashboard.v1.ChartData")
}

func init() { proto.RegisterFile("indexer/dashboard/v1/types.proto", fileDescriptor_ee67c7cc4eee856e) }

var fileDescriptor_ee67c7cc4eee856e = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xcd, 0x4e, 0xc2, 0x40,
	0x14, 0x85, 0x3b, 0x80, 0x08, 0xa3, 0xf1, 0x67, 0x42, 0x4c, 0x65, 0x31, 0x41, 0x36, 0xb2, 0xd0,
	0x36, 0xc4, 0x9d, 0x3b, 0xc5, 0x44, 0x17, 0x2e, 0x0c, 0x0b, 0x17, 0xc6, 0xa4, 0x99, 0xb6, 0x93,
	0x76, 0x42, 0xe9, 0x90, 0xf6, 0xb6, 0xe0, 0x5b, 0xf8, 0x18, 0x3e, 0x80, 0x0f, 0xc1, 0x92, 0xa5,
	0x4b, 0x2d, 0x2f, 0x62, 0xb8, 0x40, 0x75, 0x77, 0xce, 0x3d, 0xdf, 0xfc, 0x1e, 0xda, 0x51, 0xb1,
	0x2f, 0x67, 0x32, 0xb1, 0x7d, 0x91, 0x86, 0xae, 0x16, 0x89, 0x6f, 0xe7, 0x7d, 0x1b, 0xde, 0x26,
	0x32, 0xb5, 0x26, 0x89, 0x06, 0xcd, 0x5a, 0x1b, 0xc2, 0x2a, 0x09, 0x2b, 0xef, 0xb7, 0x5b, 0x81,
	0x0e, 0x34, 0x02, 0xf6, 0x4a, 0xad, 0xd9, 0xee, 0x3d, 0x3d, 0xbe, 0xf1, 0x3c, 0x9d, 0xc5, 0x90,
	0x3e, 0xc9, 0xe4, 0x41, 0xaa, 0x20, 0x04, 0x76, 0x42, 0xeb, 0x21, 0x2a, 0x93, 0x74, 0x48, 0xaf,
	0x3a, 0xdc, 0x38, 0xd6, 0xa6, 0x0d, 0xb1, 0x81, 0xcd, 0x4a, 0xa7, 0xda, 0x6b, 0x0e, 0x4b, 0xdf,
	0xfd, 0x24, 0xb4, 0x39, 0x08, 0x45, 0x02, 0x77, 0x02, 0x04, 0x63, 0xb4, 0xe6, 0x0b, 0x90, 0xb8,
	0xbe, 0x39, 0x44, 0xcd, 0x2e, 0x28, 0x03, 0x0d, 0x22, 0x72, 0x72, 0x11, 0x65, 0xd2, 0x89, 0xb4,
	0x37, 0x92, 0xbe, 0x59, 0xc1, 0x13, 0x8e, 0x30, 0x79, 0x5e, 0x05, 0x8f, 0x38, 0x67, 0xa7, 0xb4,
	0x01, 0x33, 0x07, 0x37, 0x37, 0xab, 0xc8, 0xec, 0xc2, 0x6c, 0xb0, 0xb2, 0xec, 0x9c, 0x1e, 0x0a,
	0x0f, 0x54, 0x2e, 0x9d, 0xf2, 0x36, 0x35, 0x24, 0x0e, 0xd6, 0xe3, 0xed, 0x83, 0xd8, 0x19, 0xdd,
	0x8f, 0xe5, 0xf4, 0x8f, 0xda, 0x41, 0x6a, 0x2f, 0x96, 0xd3, 0x2d, 0x72, 0xfb, 0x3a, 0xff, 0xe1,
	0xc6, 0x47, 0xc1, 0xc9, 0xbc, 0xe0, 0x64, 0x51, 0x70, 0xf2, 0x5d, 0x70, 0xf2, 0xbe, 0xe4, 0xc6,
	0x62, 0xc9, 0x8d, 0xaf, 0x25, 0x37, 0x5e, 0xae, 0x03, 0x05, 0x61, 0xe6, 0x5a, 0x9e, 0x1e, 0xdb,
	0x2a, 0x56, 0xa0, 0xc4, 0x65, 0x24, 0xdc, 0xd4, 0x1e, 0xe5, 0xdb, 0x22, 0xd2, 0xcc, 0x1d, 0x6b,
	0x3f, 0x8b, 0xe4, 0xbf, 0x4a, 0xb0, 0x0f, 0xb7, 0x8e, 0x9f, 0x7c, 0xf5, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x50, 0x97, 0xf0, 0xb9, 0xb4, 0x01, 0x00, 0x00,
}

func (this *AccountsPerHeight) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccountsPerHeight)
	if !ok {
		that2, ok := that.(AccountsPerHeight)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if len(this.Accounts) != len(that1.Accounts) {
		return false
	}
	for i := range this.Accounts {
		if this.Accounts[i] != that1.Accounts[i] {
			return false
		}
	}
	return true
}
func (this *ChartData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChartData)
	if !ok {
		that2, ok := that.(ChartData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.TotalValueLocked != that1.TotalValueLocked {
		return false
	}
	if this.TxCount != that1.TxCount {
		return false
	}
	if this.ActiveAccounts != that1.ActiveAccounts {
		return false
	}
	if this.NewAccounts != that1.NewAccounts {
		return false
	}
	return true
}
func (m *AccountsPerHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountsPerHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountsPerHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accounts[iNdEx])
			copy(dAtA[i:], m.Accounts[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Accounts[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChartData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChartData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChartData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewAccounts != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NewAccounts))
		i--
		dAtA[i] = 0x28
	}
	if m.ActiveAccounts != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ActiveAccounts))
		i--
		dAtA[i] = 0x20
	}
	if m.TxCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TxCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalValueLocked != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TotalValueLocked))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Date) > 0 {
		i -= len(m.Date)
		copy(dAtA[i:], m.Date)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Date)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccountsPerHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	if len(m.Accounts) > 0 {
		for _, s := range m.Accounts {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ChartData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TotalValueLocked != 0 {
		n += 1 + sovTypes(uint64(m.TotalValueLocked))
	}
	if m.TxCount != 0 {
		n += 1 + sovTypes(uint64(m.TxCount))
	}
	if m.ActiveAccounts != 0 {
		n += 1 + sovTypes(uint64(m.ActiveAccounts))
	}
	if m.NewAccounts != 0 {
		n += 1 + sovTypes(uint64(m.NewAccounts))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountsPerHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountsPerHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountsPerHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChartData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChartData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChartData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValueLocked", wireType)
			}
			m.TotalValueLocked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalValueLocked |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCount", wireType)
			}
			m.TxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveAccounts", wireType)
			}
			m.ActiveAccounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveAccounts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAccounts", wireType)
			}
			m.NewAccounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewAccounts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)

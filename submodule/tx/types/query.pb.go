// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: indexer/tx/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryTxRequest is the request type for the Query/Txs RPC method
type QueryTxRequest struct {
	// address is the address to query txs for.
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *QueryTxRequest) Reset()         { *m = QueryTxRequest{} }
func (m *QueryTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxRequest) ProtoMessage()    {}
func (*QueryTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c91c96051207f94b, []int{0}
}
func (m *QueryTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxRequest.Merge(m, src)
}
func (m *QueryTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxRequest proto.InternalMessageInfo

func (m *QueryTxRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// QueryTxResponse is the response type for the Query/Txs RPC method
type QueryTxResponse struct {
	// txs is the list of queried transactions.
	Tx *types.TxResponse `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *QueryTxResponse) Reset()         { *m = QueryTxResponse{} }
func (m *QueryTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTxResponse) ProtoMessage()    {}
func (*QueryTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c91c96051207f94b, []int{1}
}
func (m *QueryTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxResponse.Merge(m, src)
}
func (m *QueryTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxResponse proto.InternalMessageInfo

func (m *QueryTxResponse) GetTx() *types.TxResponse {
	if m != nil {
		return m.Tx
	}
	return nil
}

// QueryTxsequest is the request type for the Query/Txs RPC method
type QueryTxsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTxsRequest) Reset()         { *m = QueryTxsRequest{} }
func (m *QueryTxsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxsRequest) ProtoMessage()    {}
func (*QueryTxsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c91c96051207f94b, []int{2}
}
func (m *QueryTxsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxsRequest.Merge(m, src)
}
func (m *QueryTxsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxsRequest proto.InternalMessageInfo

func (m *QueryTxsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTxsByAccountRequest is the request type for the Query/Txs RPC method
type QueryTxsByAccountRequest struct {
	// address is the address to query txs for.
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTxsByAccountRequest) Reset()         { *m = QueryTxsByAccountRequest{} }
func (m *QueryTxsByAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxsByAccountRequest) ProtoMessage()    {}
func (*QueryTxsByAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c91c96051207f94b, []int{3}
}
func (m *QueryTxsByAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxsByAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxsByAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxsByAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxsByAccountRequest.Merge(m, src)
}
func (m *QueryTxsByAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxsByAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxsByAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxsByAccountRequest proto.InternalMessageInfo

func (m *QueryTxsByAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryTxsByAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTxsByHeightRequest is the request type for the Query/Txs RPC method
type QueryTxsByHeightRequest struct {
	// height is the height to query txs for.
	Height     int64              `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTxsByHeightRequest) Reset()         { *m = QueryTxsByHeightRequest{} }
func (m *QueryTxsByHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxsByHeightRequest) ProtoMessage()    {}
func (*QueryTxsByHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c91c96051207f94b, []int{4}
}
func (m *QueryTxsByHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxsByHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxsByHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxsByHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxsByHeightRequest.Merge(m, src)
}
func (m *QueryTxsByHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxsByHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxsByHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxsByHeightRequest proto.InternalMessageInfo

func (m *QueryTxsByHeightRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryTxsByHeightRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTxsResponse is the response type for the Query/Txs RPC method
type QueryTxsResponse struct {
	// txs is the list of queried transactions.
	Txs        []*types.TxResponse `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTxsResponse) Reset()         { *m = QueryTxsResponse{} }
func (m *QueryTxsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTxsResponse) ProtoMessage()    {}
func (*QueryTxsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c91c96051207f94b, []int{5}
}
func (m *QueryTxsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxsResponse.Merge(m, src)
}
func (m *QueryTxsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxsResponse proto.InternalMessageInfo

func (m *QueryTxsResponse) GetTxs() []*types.TxResponse {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *QueryTxsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryTxRequest)(nil), "indexer.tx.v1.QueryTxRequest")
	proto.RegisterType((*QueryTxResponse)(nil), "indexer.tx.v1.QueryTxResponse")
	proto.RegisterType((*QueryTxsRequest)(nil), "indexer.tx.v1.QueryTxsRequest")
	proto.RegisterType((*QueryTxsByAccountRequest)(nil), "indexer.tx.v1.QueryTxsByAccountRequest")
	proto.RegisterType((*QueryTxsByHeightRequest)(nil), "indexer.tx.v1.QueryTxsByHeightRequest")
	proto.RegisterType((*QueryTxsResponse)(nil), "indexer.tx.v1.QueryTxsResponse")
}

func init() { proto.RegisterFile("indexer/tx/v1/query.proto", fileDescriptor_c91c96051207f94b) }

var fileDescriptor_c91c96051207f94b = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x6f, 0x12, 0x41,
	0x14, 0xef, 0xb2, 0x91, 0xc6, 0xa9, 0xff, 0x32, 0x21, 0x96, 0xa2, 0x5d, 0x0d, 0xd5, 0x62, 0x4d,
	0xd8, 0x09, 0xd4, 0x78, 0x2f, 0x07, 0xdb, 0x8b, 0x89, 0xae, 0x5c, 0xf4, 0x42, 0x66, 0x61, 0xb2,
	0x3b, 0x11, 0x76, 0x28, 0x33, 0x4b, 0x86, 0x10, 0x2e, 0x26, 0x1e, 0xbc, 0x99, 0x34, 0xf1, 0x93,
	0xf8, 0x21, 0x3c, 0x36, 0x7a, 0xf1, 0x68, 0xc0, 0x8b, 0xdf, 0xc2, 0xec, 0xcc, 0x2c, 0xb0, 0xad,
	0x04, 0x63, 0x3c, 0xc1, 0x9b, 0xf7, 0x7e, 0x7f, 0xde, 0xec, 0x6f, 0x17, 0xec, 0xd0, 0xa8, 0x43,
	0x24, 0x19, 0x20, 0x21, 0xd1, 0xb0, 0x86, 0x4e, 0x63, 0x32, 0x18, 0xb9, 0xfd, 0x01, 0x13, 0x0c,
	0x5e, 0x37, 0x2d, 0x57, 0x48, 0x77, 0x58, 0x2b, 0xed, 0xb5, 0x19, 0xef, 0x31, 0x8e, 0x7c, 0xcc,
	0x09, 0xc2, 0x7e, 0x9b, 0xa2, 0x61, 0xcd, 0x27, 0x02, 0xd7, 0x54, 0xa1, 0x31, 0xa5, 0xc7, 0xcb,
	0x43, 0x8a, 0x6c, 0x3e, 0xd5, 0xc7, 0x01, 0x8d, 0xb0, 0xa0, 0x2c, 0x32, 0xb3, 0x3b, 0x7a, 0xb6,
	0xa5, 0x2a, 0xa4, 0x0b, 0xd3, 0x2a, 0x04, 0x2c, 0x60, 0xfa, 0x3c, 0xf9, 0x67, 0x4e, 0xef, 0x06,
	0x8c, 0x05, 0x5d, 0x82, 0x70, 0x9f, 0x22, 0x1c, 0x45, 0x4c, 0x28, 0x36, 0x83, 0x29, 0x1f, 0x80,
	0x1b, 0x2f, 0x13, 0xc1, 0xa6, 0xf4, 0xc8, 0x69, 0x4c, 0xb8, 0x80, 0xdb, 0x60, 0x53, 0xc8, 0x56,
	0x88, 0x79, 0x58, 0xb4, 0xee, 0x5b, 0x8f, 0xae, 0x7a, 0x79, 0x21, 0x4f, 0x30, 0x0f, 0xcb, 0xc7,
	0xe0, 0xe6, 0x7c, 0x94, 0xf7, 0x59, 0xc4, 0x09, 0x7c, 0x02, 0x72, 0x42, 0xaa, 0xb1, 0xad, 0xfa,
	0x03, 0xd7, 0x98, 0x49, 0xb6, 0x70, 0xd5, 0x76, 0x66, 0x09, 0x77, 0x81, 0xf0, 0x72, 0x42, 0x96,
	0x5f, 0xcf, 0x89, 0x78, 0x2a, 0xfa, 0x0c, 0x80, 0xc5, 0xa6, 0x86, 0x70, 0x3f, 0x43, 0xa8, 0xef,
	0x38, 0x65, 0x7c, 0x81, 0x03, 0x62, 0xb0, 0xde, 0x12, 0xb2, 0xfc, 0xc9, 0x02, 0xc5, 0x94, 0xbb,
	0x31, 0x3a, 0x6a, 0xb7, 0x59, 0x1c, 0x89, 0x54, 0xa4, 0x0e, 0x36, 0x71, 0xa7, 0x33, 0x20, 0x9c,
	0xeb, 0xcd, 0x1a, 0xc5, 0xaf, 0x9f, 0xab, 0x05, 0x23, 0x72, 0xa4, 0x3b, 0xaf, 0xc4, 0x80, 0x46,
	0x81, 0x97, 0x0e, 0x5e, 0x30, 0x66, 0xff, 0xb3, 0xb1, 0x11, 0xd8, 0x5e, 0xf8, 0x3a, 0x21, 0x34,
	0x08, 0xe7, 0xb6, 0x6e, 0x83, 0x7c, 0xa8, 0x0e, 0x94, 0x2b, 0xdb, 0x33, 0xd5, 0x7f, 0x93, 0x3e,
	0xb3, 0xc0, 0xad, 0xc5, 0x7d, 0x9b, 0x27, 0xf7, 0x14, 0xd8, 0x42, 0x26, 0xf7, 0x60, 0xff, 0xf5,
	0xa3, 0x4b, 0x00, 0xf0, 0x38, 0x63, 0x2a, 0xa7, 0x4c, 0x55, 0xd6, 0x9a, 0x32, 0x0c, 0x4b, 0xd0,
	0xfa, 0x2f, 0x1b, 0x5c, 0x51, 0xae, 0x60, 0x08, 0x72, 0x4d, 0x09, 0x77, 0xdd, 0xcc, 0x8b, 0xe3,
	0x66, 0x53, 0x59, 0x72, 0x56, 0xb5, 0x35, 0x75, 0x79, 0xef, 0xdd, 0xb7, 0x9f, 0x67, 0xb9, 0x5d,
	0x78, 0x07, 0x65, 0x5f, 0x4d, 0x21, 0xd1, 0xd8, 0xc4, 0x79, 0x02, 0x7d, 0x60, 0x37, 0x25, 0x87,
	0x2b, 0xb8, 0xd2, 0x30, 0x96, 0xee, 0xad, 0xec, 0x1b, 0xb1, 0x92, 0x12, 0x2b, 0x40, 0x78, 0x49,
	0x8c, 0xc3, 0x0f, 0x16, 0xb8, 0xb6, 0x1c, 0x3e, 0x58, 0x59, 0xc1, 0x76, 0x31, 0x9e, 0xeb, 0x65,
	0x91, 0x92, 0x3d, 0x80, 0x95, 0xcb, 0xb2, 0xc8, 0x1f, 0xb5, 0xb0, 0xa6, 0x43, 0x63, 0x93, 0xdd,
	0x09, 0x7c, 0x6f, 0x81, 0xad, 0xa5, 0xc0, 0xc1, 0xfd, 0x95, 0x56, 0x32, 0x89, 0x5c, 0xef, 0xa4,
	0xaa, 0x9c, 0x54, 0xe0, 0xc3, 0x3f, 0x3b, 0xd1, 0x01, 0x46, 0x63, 0xfd, 0x3b, 0x69, 0x3c, 0xff,
	0x32, 0x75, 0xac, 0xf3, 0xa9, 0x63, 0xfd, 0x98, 0x3a, 0xd6, 0xc7, 0x99, 0xb3, 0x71, 0x3e, 0x73,
	0x36, 0xbe, 0xcf, 0x9c, 0x8d, 0x37, 0x87, 0x01, 0x15, 0x61, 0xec, 0xbb, 0x6d, 0xd6, 0x43, 0x34,
	0xa2, 0x82, 0xe2, 0x6a, 0x17, 0xfb, 0x1c, 0xbd, 0x1d, 0xa6, 0xc4, 0x3c, 0xf6, 0x7b, 0xac, 0x13,
	0x77, 0x49, 0x22, 0x21, 0x46, 0x7d, 0xc2, 0xfd, 0xbc, 0xfa, 0x74, 0x1d, 0xfe, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x55, 0xb6, 0xf0, 0x93, 0x86, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Tx queries a transaction by hash
	Tx(ctx context.Context, in *QueryTxRequest, opts ...grpc.CallOption) (*QueryTxResponse, error)
	// Txs queries all transactions with pagination
	Txs(ctx context.Context, in *QueryTxsRequest, opts ...grpc.CallOption) (*QueryTxsResponse, error)
	// TxsByAccount queries all the collections of given account
	TxsByAccount(ctx context.Context, in *QueryTxsByAccountRequest, opts ...grpc.CallOption) (*QueryTxsResponse, error)
	// TxsByHeight queries all the collections of given height
	TxsByHeight(ctx context.Context, in *QueryTxsByHeightRequest, opts ...grpc.CallOption) (*QueryTxsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Tx(ctx context.Context, in *QueryTxRequest, opts ...grpc.CallOption) (*QueryTxResponse, error) {
	out := new(QueryTxResponse)
	err := c.cc.Invoke(ctx, "/indexer.tx.v1.Query/Tx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Txs(ctx context.Context, in *QueryTxsRequest, opts ...grpc.CallOption) (*QueryTxsResponse, error) {
	out := new(QueryTxsResponse)
	err := c.cc.Invoke(ctx, "/indexer.tx.v1.Query/Txs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TxsByAccount(ctx context.Context, in *QueryTxsByAccountRequest, opts ...grpc.CallOption) (*QueryTxsResponse, error) {
	out := new(QueryTxsResponse)
	err := c.cc.Invoke(ctx, "/indexer.tx.v1.Query/TxsByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TxsByHeight(ctx context.Context, in *QueryTxsByHeightRequest, opts ...grpc.CallOption) (*QueryTxsResponse, error) {
	out := new(QueryTxsResponse)
	err := c.cc.Invoke(ctx, "/indexer.tx.v1.Query/TxsByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Tx queries a transaction by hash
	Tx(context.Context, *QueryTxRequest) (*QueryTxResponse, error)
	// Txs queries all transactions with pagination
	Txs(context.Context, *QueryTxsRequest) (*QueryTxsResponse, error)
	// TxsByAccount queries all the collections of given account
	TxsByAccount(context.Context, *QueryTxsByAccountRequest) (*QueryTxsResponse, error)
	// TxsByHeight queries all the collections of given height
	TxsByHeight(context.Context, *QueryTxsByHeightRequest) (*QueryTxsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Tx(ctx context.Context, req *QueryTxRequest) (*QueryTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tx not implemented")
}
func (*UnimplementedQueryServer) Txs(ctx context.Context, req *QueryTxsRequest) (*QueryTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Txs not implemented")
}
func (*UnimplementedQueryServer) TxsByAccount(ctx context.Context, req *QueryTxsByAccountRequest) (*QueryTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxsByAccount not implemented")
}
func (*UnimplementedQueryServer) TxsByHeight(ctx context.Context, req *QueryTxsByHeightRequest) (*QueryTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxsByHeight not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Tx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Tx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexer.tx.v1.Query/Tx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Tx(ctx, req.(*QueryTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Txs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Txs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexer.tx.v1.Query/Txs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Txs(ctx, req.(*QueryTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TxsByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxsByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TxsByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexer.tx.v1.Query/TxsByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TxsByAccount(ctx, req.(*QueryTxsByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TxsByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxsByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TxsByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indexer.tx.v1.Query/TxsByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TxsByHeight(ctx, req.(*QueryTxsByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "indexer.tx.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tx",
			Handler:    _Query_Tx_Handler,
		},
		{
			MethodName: "Txs",
			Handler:    _Query_Txs_Handler,
		},
		{
			MethodName: "TxsByAccount",
			Handler:    _Query_TxsByAccount_Handler,
		},
		{
			MethodName: "TxsByHeight",
			Handler:    _Query_TxsByHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indexer/tx/v1/query.proto",
}

func (m *QueryTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxsByAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxsByAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxsByAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxsByHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxsByHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxsByHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTxsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTxsByAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTxsByHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTxsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &types.TxResponse{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxsByAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxsByAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxsByAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxsByHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxsByHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxsByHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &types.TxResponse{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
